package com.keeper.image.download.service;

import com.keeper.image.common.FileStorageUtil;
import com.keeper.image.common.model.dto.ImageFileDto;
import com.keeper.image.download.client.StorageServiceClient;
import com.keeper.image.download.controller.ResourceWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;

/**
 * Service class for handling download request and communication with storage-service
 */
@Service
public class DownloadService {
    Logger logger = LoggerFactory.getLogger(DownloadService.class);

    @Value("${storage.location}")
    private String fileStorageLocation;

    private StorageServiceClient storageServiceClient;

    @Autowired
    public DownloadService(StorageServiceClient storageServiceClient) {
        this.storageServiceClient = storageServiceClient;
    }

    /**
     * Get file from file system using secureId generated by storage-service
     * @param secureId temporary identifier of image
     * @return ResourceWrapper object with image resource and file name
     */
    public ResourceWrapper getFileBySecureId(String secureId) {
        logger.info(":: getFileBySecureId(secureId={}", secureId);

        // In order to download file, service will check secure id in storage-service
        ImageFileDto imageFileDto = storageServiceClient.getFileIdBySecureId(secureId);

        logger.debug("Image file DTO from storage-service. Image uid: {}, original file name: {}", imageFileDto.getImageUid(), imageFileDto.getOriginalName());

        // Get file from file-system using image uid (returned from storage-service)
        Resource resource = FileStorageUtil.loadFileAsResource(imageFileDto.getImageUid(), fileStorageLocation);

        return new ResourceWrapper(resource, imageFileDto.getOriginalName());
    }

}
